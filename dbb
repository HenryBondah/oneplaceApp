-- Drop all tables to ensure a clean slate
DO $$ DECLARE
    r RECORD;
BEGIN
    FOR r IN (SELECT tablename FROM pg_tables WHERE schemaname = current_schema()) LOOP
        EXECUTE 'DROP TABLE IF EXISTS ' || quote_ident(r.tablename) || ' CASCADE';
    END LOOP;
END $$;

-- Drop all types to avoid conflicts
DO $$ DECLARE
    r RECORD;
BEGIN
    FOR r IN (SELECT n.nspname as schema, t.typname as type
              FROM pg_type t
              LEFT JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace
              WHERE (t.typname = 'user_role' OR t.typname = 'application_status' OR t.typname = 'attendance_status')
              AND (n.nspname NOT IN ('pg_catalog', 'information_schema'))) LOOP
        EXECUTE 'DROP TYPE IF EXISTS ' || quote_ident(r.schema) || '.' || quote_ident(r.type) || ' CASCADE';
    END LOOP;
END $$;

-- Create ENUM types for user roles, application status, and attendance status
DO $$ BEGIN
    CREATE TYPE user_role AS ENUM ('Admin', 'Mini Admin', 'Manager', 'Supervisor', 'Teacher');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE application_status AS ENUM ('Pending', 'Approved', 'Declined');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE attendance_status AS ENUM ('Present', 'Absent');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- Organizations Table
CREATE TABLE IF NOT EXISTS organizations (
    organization_id SERIAL PRIMARY KEY,
    organization_name VARCHAR(255) NOT NULL,
    organization_address VARCHAR(255) NOT NULL,
    organization_phone VARCHAR(15),
    proof_of_existence_1 VARCHAR(255) NOT NULL,
    proof_of_existence_2 VARCHAR(255),
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    approved BOOLEAN DEFAULT false,
    on_hold BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    review_timestamp TIMESTAMP WITH TIME ZONE,
    deleted BOOLEAN DEFAULT false,
    logo_path VARCHAR(255),
    font_style VARCHAR(50)
);

CREATE OR REPLACE FUNCTION update_modified_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now(); 
    RETURN NEW; 
END;
$$ LANGUAGE 'plpgsql';

CREATE TRIGGER update_organizations_modtime
    BEFORE UPDATE ON organizations
    FOR EACH ROW
    EXECUTE FUNCTION update_modified_column();

-- Graduation Year Groups Table
CREATE TABLE IF NOT EXISTS graduation_year_groups (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) UNIQUE NOT NULL,
    organization_id INT REFERENCES organizations(organization_id) ON DELETE CASCADE
);

-- Users Table
CREATE TABLE IF NOT EXISTS users (
    user_id SERIAL PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    account_type user_role NOT NULL,
    organization_id INT REFERENCES organizations(organization_id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    on_hold BOOLEAN DEFAULT FALSE
);

CREATE TRIGGER update_users_modtime
    BEFORE UPDATE ON users
    FOR EACH ROW
    EXECUTE FUNCTION update_modified_column();

-- Classes Table
CREATE TABLE IF NOT EXISTS classes (
    class_id SERIAL PRIMARY KEY,
    class_name VARCHAR(255) NOT NULL,
    organization_id INT REFERENCES organizations(organization_id) ON DELETE CASCADE,
    created_by INT REFERENCES users(user_id) ON DELETE SET NULL,
    graduation_year_group_id INT REFERENCES graduation_year_groups(id)
);

-- Subjects Table
CREATE TABLE IF NOT EXISTS subjects (
    subject_id SERIAL PRIMARY KEY,
    subject_name VARCHAR(255) NOT NULL,
    class_id INT REFERENCES classes(class_id) ON DELETE CASCADE,
    created_by INT REFERENCES users(user_id) ON DELETE SET NULL,
    organization_id INT REFERENCES organizations(organization_id) ON DELETE CASCADE,
    grad_year_group_id INT REFERENCES graduation_year_groups(id) ON DELETE CASCADE
);

-- Students Table
CREATE TABLE IF NOT EXISTS students (
    student_id SERIAL PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    date_of_birth DATE,
    class_id INT REFERENCES classes(class_id) ON DELETE CASCADE,
    created_by INT REFERENCES users(user_id) ON DELETE SET NULL,
    organization_id INT REFERENCES organizations(organization_id) ON DELETE CASCADE,
    height DECIMAL(5,2),
    hometown VARCHAR(255),
    image_url VARCHAR(255),
    age INTEGER,
    total_percentage DECIMAL(5,2),
    grade VARCHAR(2),
    gender VARCHAR(10)
);

-- Guardians Table
CREATE TABLE IF NOT EXISTS guardians (
    guardian_id SERIAL PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    address VARCHAR(255),
    phone VARCHAR(15),
    hometown VARCHAR(255),
    image_url VARCHAR(255),
    student_id INT REFERENCES students(student_id) ON DELETE CASCADE,
    organization_id INT REFERENCES organizations(organization_id) ON DELETE CASCADE,
    CONSTRAINT unique_student_guardian UNIQUE (student_id, first_name)
);

-- Student_Subjects Table (many-to-many relationship)
CREATE TABLE IF NOT EXISTS student_subjects (
    student_id INT NOT NULL,
    subject_id INT NOT NULL,
    grade VARCHAR(255),
    PRIMARY KEY (student_id, subject_id),
    FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE,
    FOREIGN KEY (subject_id) REFERENCES subjects(subject_id) ON DELETE CASCADE,
    organization_id INT REFERENCES organizations(organization_id) ON DELETE CASCADE
);

-- Assessments Table
CREATE TABLE IF NOT EXISTS assessments (
    assessment_id SERIAL PRIMARY KEY,
    class_id INT REFERENCES classes(class_id) ON DELETE CASCADE,
    subject_id INT REFERENCES subjects(subject_id) ON DELETE CASCADE,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    created_by INT REFERENCES users(user_id) ON DELETE SET NULL,
    organization_id INT REFERENCES organizations(organization_id) ON DELETE CASCADE,
    weight NUMERIC,
    category VARCHAR(50)
);

-- Assessment Results Table
CREATE TABLE IF NOT EXISTS assessment_results (
    result_id SERIAL PRIMARY KEY,
    assessment_id INT REFERENCES assessments(assessment_id) ON DELETE CASCADE,
    student_id INT REFERENCES students(student_id) ON DELETE CASCADE,
    score DECIMAL(5,2),
    grade VARCHAR(2),
    created_by INT REFERENCES users(user_id) ON DELETE SET NULL,
    organization_id INT REFERENCES organizations(organization_id) ON DELETE CASCADE,
    title VARCHAR(255),
    total_subject_score NUMERIC(10, 2),
    total_percentage NUMERIC(5, 2),
    position INTEGER,
    category VARCHAR(50),
    class_id INT REFERENCES classes(class_id) ON DELETE CASCADE
);

-- Attendance Records Table
CREATE TABLE IF NOT EXISTS attendance_records (
    attendance_id SERIAL PRIMARY KEY,
    student_id INT REFERENCES students(student_id) ON DELETE CASCADE,
    class_id INT REFERENCES classes(class_id) ON DELETE CASCADE,
    date DATE NOT NULL,
    status attendance_status,
    marked_by INT REFERENCES users(user_id) ON DELETE SET NULL,
    organization_id INT REFERENCES organizations(organization_id) ON DELETE CASCADE,
    marked_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (student_id, date)
);

CREATE TRIGGER update_attendance_modtime
    BEFORE UPDATE ON attendance_records
    FOR EACH ROW
    EXECUTE FUNCTION update_modified_column();

-- Admins Table
CREATE TABLE IF NOT EXISTS admins (
    admin_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,
    organization_id INT REFERENCES organizations(organization_id) ON DELETE CASCADE
);

-- Announcements Table
CREATE TABLE IF NOT EXISTS announcements (
    announcement_id SERIAL PRIMARY KEY,
    message TEXT NOT NULL,
    organization_id INT REFERENCES organizations(organization_id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    visibility VARCHAR(10) DEFAULT 'both'
);

-- School Events Table
CREATE TABLE IF NOT EXISTS school_events (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    event_date DATE,
    details TEXT,
    organization_id INT REFERENCES organizations(organization_id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    visibility VARCHAR(10) DEFAULT 'both'
);

-- School Years Table
CREATE TABLE IF NOT EXISTS school_years (
    id SERIAL PRIMARY KEY,
    year_label VARCHAR(255) NOT NULL,
    current BOOLEAN DEFAULT FALSE,
    organization_id INT REFERENCES organizations(organization_id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Terms Table
CREATE TABLE IF NOT EXISTS terms (
    term_id SERIAL PRIMARY KEY,
    school_year_id INT NOT NULL REFERENCES school_years(id),
    term_name VARCHAR(255) NOT NULL,
    start_date DATE,
    end_date DATE,
    organization_id INT REFERENCES organizations(organization_id) ON DELETE CASCADE,
    year_id INT,
    current BOOLEAN DEFAULT FALSE
);

-- Term Classes Table (many-to-many relationship between terms and classes)
CREATE TABLE IF NOT EXISTS term_classes (
    term_id INT NOT NULL,
    class_id INT NOT NULL,
    organization_id INT REFERENCES organizations(organization_id) ON DELETE CASCADE,
    PRIMARY KEY (term_id, class_id),
    FOREIGN KEY (term_id) REFERENCES terms(term_id) ON DELETE CASCADE,
    FOREIGN KEY (class_id) REFERENCES classes(class_id) ON DELETE CASCADE
);

-- Organization Texts Table
CREATE TABLE IF NOT EXISTS organization_texts (
    text_id SERIAL PRIMARY KEY,
    organization_id INTEGER NOT NULL,
    heading TEXT NOT NULL,
    paragraph TEXT NOT NULL,
    FOREIGN KEY (organization_id) REFERENCES organizations(organization_id)
);

-- Users Classes Table
CREATE TABLE IF NOT EXISTS user_classes (
    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,
    class_id INT REFERENCES classes(class_id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, class_id),
    main BOOLEAN DEFAULT FALSE
);

-- Users Subjects Table
CREATE TABLE IF NOT EXISTS user_subjects (
    user_id INTEGER REFERENCES users(user_id),
    subject_id INTEGER REFERENCES subjects(subject_id),
    PRIMARY KEY (user_id, subject_id)
);

-- Student Positions Table
CREATE TABLE IF NOT EXISTS student_positions (
    position_id SERIAL PRIMARY KEY,
    student_id INT REFERENCES students(student_id) ON DELETE CASCADE,
    subject_id INT REFERENCES subjects(subject_id) ON DELETE CASCADE,
    organization_id INT REFERENCES organizations(organization_id) ON DELETE CASCADE,
    total_subject_score NUMERIC(10, 2),
    position INT,
    class_id INT REFERENCES classes(class_id),
    category VARCHAR(255),
    UNIQUE (student_id, subject_id, category)
);

-- Category Scores Table
CREATE TABLE IF NOT EXISTS category_scores (
    category_score_id SERIAL PRIMARY KEY,
    student_id INT REFERENCES students(student_id) ON DELETE CASCADE,
    class_id INT REFERENCES classes(class_id) ON DELETE CASCADE,
    subject_id INT REFERENCES subjects(subject_id) ON DELETE CASCADE,
    organization_id INT REFERENCES organizations(organization_id) ON DELETE CASCADE,
    category VARCHAR(50),
    total_score DECIMAL(10, 2) DEFAULT 0,
    term_id INT,  -- This already exists
    UNIQUE (student_id, class_id, subject_id, category, organization_id)
);

-- Status Settings Table
CREATE TABLE IF NOT EXISTS status_settings (
    id SERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    cut_off_point INT,
    promoted_class VARCHAR(255),
    repeated_class VARCHAR(255),
    school_reopen_date DATE,
    class_id INT REFERENCES classes(class_id) ON DELETE CASCADE,
    activate_promotion BOOLEAN DEFAULT false,
    term_id INT,
    CONSTRAINT unique_org_class UNIQUE (organization_id, class_id)
);

-- Teacher Remarks Table
CREATE TABLE IF NOT EXISTS teacher_remarks (
    id SERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    class_id INT REFERENCES classes(class_id) ON DELETE CASCADE,
    remark TEXT NOT NULL,
    CONSTRAINT unique_teacher_remarks UNIQUE (organization_id, class_id, remark)
);

-- Score Remarks Table
CREATE TABLE IF NOT EXISTS score_remarks (
    id SERIAL PRIMARY KEY,
    organization_id INT NOT NULL,
    class_id INT REFERENCES classes(class_id) ON DELETE CASCADE,
    remark TEXT NOT NULL,
    from_percentage NUMERIC,
    to_percentage NUMERIC,
    CONSTRAINT unique_organization_class_score UNIQUE (organization_id, class_id, remark)
);

-- Organization Images Table
CREATE TABLE IF NOT EXISTS organization_images (
    image_id SERIAL PRIMARY KEY,
    organization_id INTEGER REFERENCES organizations(organization_id),
    image_url TEXT NOT NULL,
    caption TEXT,
    allocation VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    class_id INT REFERENCES classes(class_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS report_settings (
    setting_id SERIAL PRIMARY KEY,
    organization_id INT REFERENCES organizations(organization_id) ON DELETE CASCADE,
    signature_image_path VARCHAR(255), -- Path to the signature image
    class_id INT REFERENCES classes(class_id) ON DELETE CASCADE -- You can add additional columns as needed
);


-- Ensure indexes for optimization
CREATE INDEX IF NOT EXISTS idx_user_email ON users (email);
CREATE INDEX IF NOT EXISTS idx_org_name ON organizations (organization_name);
CREATE INDEX IF NOT EXISTS idx_class_name ON classes (class_name);
CREATE INDEX IF NOT EXISTS idx_student_name ON students (first_name, last_name);

-- Update assessment_results to include category information from assessments (after table is created)
UPDATE assessment_results ar
SET category = a.category
FROM assessments a
WHERE ar.assessment_id = a.assessment_id;

-- Update assessment_results with assessment titles (after table is created)
UPDATE assessment_results ar
SET title = a.title
FROM assessments a
WHERE ar.assessment_id = a.assessment_id;

-- Additional ALTER statements (skip if column exists)
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='terms' AND column_name='current_term') THEN
        ALTER TABLE terms ADD COLUMN current_term BOOLEAN DEFAULT false;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='assessment_results' AND column_name='total_category_score') THEN
        ALTER TABLE assessment_results ADD COLUMN total_category_score NUMERIC(10, 2);
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='assessment_results' AND column_name='term_id') THEN
        ALTER TABLE assessment_results ADD COLUMN term_id INTEGER;
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='category_scores' AND column_name='term_id') THEN
        ALTER TABLE category_scores ADD COLUMN term_id INTEGER;
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='students' AND column_name='term_id') THEN
        ALTER TABLE students ADD COLUMN term_id INTEGER;
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='subjects' AND column_name='term_id') THEN
        ALTER TABLE subjects ADD COLUMN term_id INTEGER;
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='status_settings' AND column_name='term_id') THEN
        ALTER TABLE status_settings ADD COLUMN term_id INTEGER;
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='student_positions' AND column_name='term_id') THEN
        ALTER TABLE student_positions ADD COLUMN term_id INTEGER;
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='student_subjects' AND column_name='term_id') THEN
        ALTER TABLE student_subjects ADD COLUMN term_id INTEGER;
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='assessment_results' AND column_name='class_id') THEN
        ALTER TABLE assessment_results ADD COLUMN class_id INT;
    END IF;

    -- Add constraints if they don't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE constraint_name='fk_class' AND table_name='assessment_results') THEN
        ALTER TABLE assessment_results
        ADD CONSTRAINT fk_class
        FOREIGN KEY (class_id) REFERENCES classes(class_id) ON DELETE CASCADE;
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='student_positions' AND column_name='total_category_score') THEN
        ALTER TABLE student_positions ADD COLUMN total_category_score NUMERIC(10, 2);
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='student_positions' AND column_name='class_id') THEN
        ALTER TABLE student_positions ADD COLUMN class_id INTEGER;
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='student_positions' AND column_name='category') THEN
        ALTER TABLE student_positions ADD COLUMN category VARCHAR(255);
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE constraint_name='unique_student_subject_category' AND table_name='student_positions') THEN
        ALTER TABLE student_positions
        ADD CONSTRAINT unique_student_subject_category
        UNIQUE (student_id, subject_id, category);
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE constraint_name='unique_student_class_subject_category_org' AND table_name='category_scores') THEN
        ALTER TABLE category_scores
        ADD CONSTRAINT unique_student_class_subject_category_org
        UNIQUE (student_id, class_id, subject_id, category, organization_id);
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='score_remarks' AND column_name='class_id') THEN
        ALTER TABLE score_remarks ADD COLUMN class_id INT REFERENCES classes(class_id) ON DELETE CASCADE;
    END IF;
END $$;

ALTER TABLE students ADD COLUMN graduation_year_group_id INT REFERENCES graduation_year_groups(id) ON DELETE SET NULL;
ALTER TABLE assessments ADD COLUMN max_score NUMERIC(5, 2);
-- Add class_id to the users table
ALTER TABLE users 
ADD COLUMN class_id INT REFERENCES classes(class_id) ON DELETE SET NULL;

ALTER TABLE organizations ADD COLUMN logo TEXT;
ALTER TABLE assessment_results ADD COLUMN subject_id INT REFERENCES subjects(subject_id);
 

ALTER TABLE assessments
ADD CONSTRAINT unique_class_subject_title UNIQUE (class_id, subject_id, title);


ALTER TABLE assessment_results ADD CONSTRAINT unique_student_assessment UNIQUE (student_id, assessment_id);
ALTER TABLE student_positions ADD CONSTRAINT unique_student_subject UNIQUE (student_id, subject_id);

ALTER TABLE assessments
ADD CONSTRAINT unique_assessment_title_subject UNIQUE (title, subject_id, organization_id);



CREATE TABLE enrollments (
    enrollment_id SERIAL PRIMARY KEY,
    school_year_id INTEGER REFERENCES school_years(id),
    term_id INTEGER REFERENCES terms(term_id),
    organization_id INTEGER REFERENCES organizations(organization_id),
    created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE enrolled_classes (
    enrolled_class_id SERIAL PRIMARY KEY,
    enrollment_id INTEGER REFERENCES enrollments(enrollment_id),
    class_id INTEGER REFERENCES classes(class_id)
);

CREATE TABLE enrolled_students (
    enrolled_student_id SERIAL PRIMARY KEY,
    enrollment_id INTEGER REFERENCES enrollments(enrollment_id),
    student_id INTEGER REFERENCES students(student_id),
    class_id INTEGER REFERENCES classes(class_id)
);

ALTER TABLE attendance_records
ADD COLUMN term_id INTEGER,
ADD CONSTRAINT fk_term
    FOREIGN KEY (term_id) 
    REFERENCES terms (term_id)
    ON DELETE CASCADE;

ALTER TABLE assessments
ADD COLUMN term_id integer;

ALTER TABLE assessments DROP CONSTRAINT unique_assessment_title_subject;
ALTER TABLE assessments ADD CONSTRAINT unique_assessment_title_class_subject UNIQUE (title, subject_id, class_id);
ALTER TABLE assessments ADD COLUMN group_id BIGINT;
CREATE SEQUENCE assessments_group_id_seq START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

ALTER TABLE enrolled_students
DROP CONSTRAINT enrolled_students_student_id_fkey,
ADD CONSTRAINT enrolled_students_student_id_fkey
FOREIGN KEY (student_id)
REFERENCES students(student_id)
ON DELETE CASCADE;







<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Student Report</title>
    <style>
        .actions {
            text-align: center;
            margin-bottom: 20px;
        }

        /* Container for the report background with watermark */
        .student-report-background {
            position: relative;
            width: 100%;
        }

        /* Watermark as a background for the report */
        .student-report-background::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: url('<%= session.logo %>'); /* Organization logo as watermark */
            background-repeat: no-repeat;
            background-position: center;
            background-size: 300px 300px; /* Adjust watermark size */
            opacity: 0.09; /* Make the watermark light */
            z-index: 0; /* Ensure watermark is behind all content */
            pointer-events: none; /* Make it non-interactive */
        }

        .student-report {
            position: relative;
            z-index: 1; /* Ensure report content stays above watermark */
            border: 1px solid #ccc;
            padding: 20px;
            margin-bottom: 20px;
            background-color: #fff;
            max-width: 800px;
            margin: 20px auto;
            box-sizing: border-box;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            page-break-after: always; /* Ensure each report is on its own page */
            position: relative;
            left: 70px;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            text-align: center;
        }

        .header img.logo,
        .header img.student-image {
            width: 60px;
            height: 60px;
            object-fit: cover;
            border-radius: 8px;
        }

        .header h2, .header h3 {
            margin: 0;
            text-align: center;
            white-space: nowrap;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 5px;
            text-align: left;
            font-size: 11px;
        }

        th {
            background-color: #f2f2f2;
        }



        .dropdown {
            position: relative;
            display: inline-block;
            width: 100%;
        }

        .dropdown-button {
            width: 100%;
            padding: 8px;
            font-size: 14px;
            text-align: left;
            border: 1px solid #ccc;
            border-radius: 4px;
            background-color: #fff;
            cursor: pointer;
            white-space: normal; /* Allow text to wrap */
        }
 
        .dropdown-content {
            display: none;
            position: absolute;
            background-color: #f9f9f9;
            min-width: 100%;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 1;
            max-height: 150px; /* Limit dropdown height */
            overflow-y: auto; /* Add scrolling if needed */
        }

        .dropdown-content div {
            padding: 8px;
            cursor: pointer;
            white-space: normal;
            word-wrap: break-word; /* Ensure long text wraps properly */
        }

        .dropdown-content div:hover {
            background-color: #f1f1f1;
        }

        .remarks {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 30px; /* Add space between Teacher's Remarks and Signature */
            margin: 20px auto;
        }

        .remarks-container {
            display: inline-block;
            padding: 10px;
            position: relative;
            left: -150px;
            width: 300px; /* Fixed width for consistent layout */
        }

        .signature-info {
            display: inline-block;
            padding: 10px;
            text-align: center;
            position: relative;
            left: 150px;
        }
        .remarks-container h3 {
            font-size: 16px;
            color: #333;
            margin-top: 10px;
        }

        .signature-info h3 {
            font-size: 16px;
            color: #333;
            margin-top: 10px;
            position: relative;
            top: 50px;
        }

        .signature-info img {
            max-width: 100px;
            display: block;
            margin: 0 auto 10px auto;
            position: relative;
            top: -40px;
        }







        .promotion-table th, 
        .promotion-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
            font-size: 12px;
        }

        .promotion-table select {
            width: 100px;
            padding: 2px;
            font-size: 12px;
            margin: 0 auto;
            display: block;
            border: none;
            background: transparent;
            appearance: none;
        }

        @media print {
            @page {
                size: A4 portrait;
                margin: 20mm;
            }

            body * {
                visibility: hidden; /* Hide everything during print */
            }

            .student-report-background, .student-report-background * {
                visibility: visible; /* Show the background and report content */
            }

            .student-report {
                width: 100%; /* Maximize width usage for the report */
                margin-top: 0; /* Remove any extra margins */
                padding: 10mm; /* Add some padding to ensure content doesn't touch the edges */
                page-break-after: always; /* Each report prints on a new page */
            }

            .actions {
                display: none; /* Hide the print buttons */
            }
        }
    </style>
</head>
<body>
    <div class="actions no-print">
        <button class="btn btn-primary" onclick="window.print()">Print Report</button>
        <a href="/print/reportSettings?classId=<%= classId %>&termId=<%= termId %>" class="btn btn-primary">Report Settings</a>
    </div>
    
    
    <% if (students.length === 0) { %>
        <p>No student data available</p>
    <% } else { %>
        <% students.forEach((student, index) => { %>
            <!-- <div class="student-report-background"> -->
                <div class="student-report" id="report-<%= index %>">
                    <div class="student-report-background">

                    <div class="header">
                        <% if (session.logo) { %>
                            <img src="<%= session.logo %>" alt="Organization Logo" class="logo" />
                        <% } %>
                        <div class="school-info">
                            <h2><%= orgName %></h2>
                            <h3><%= orgAddress %></h3>
                        </div>
                        <% if (student.image_url && student.image_url !== 'profilePlaceholder.png') { %>
                            <img src="<%= student.image_url %>?v=<%= new Date().getTime() %>" alt="Student Image" class="student-image">
                        <% } else { %>
                            <img src="/images/profilePlaceholder.png" alt="Placeholder Image" class="student-image">
                        <% } %>
                    </div>
                    
                    <div class="info">
                        <table>
                            <tr>
                                <td>Student Name:</td>
                                <td><%= student.first_name %> <%= student.last_name %></td>
                                <td>Term:</td>
                                <td><%= term ? term.term_name : 'No term available' %></td>
                            </tr>
                            <tr>
                                <td>Student ID:</td>
                                <td><%= student.student_id %></td>
                                <td>Academic Year:</td>
                                <td>2023-2024</td>
                            </tr>
                            <tr>
                                <td>Class:</td>
                                <td><%= student.class_name %></td>
                                <td>School Reopens:</td>
                                <td><%= schoolReopenDate ? new Date(schoolReopenDate).toLocaleDateString() : 'TBA' %></td>
                            </tr>
                        </table>
                    </div>
                    
                    <br>
                    
                    <div class="subjects">
                        <table>
                            <thead>
                                <tr>
                                    <th>Subject</th>
                                    <th>Class Score</th>
                                    <th>Exams Score</th>
                                    <th>Other Score</th>
                                    <th>Total Score</th>
                                    <th>Total Percentage</th>
                                    <th>Grade</th>
                                    <th>Position</th>
                                    <th>Remarks</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% student.subjects.forEach(subject => { %>
                                    <tr>
                                        <td><%= subject.subject_name %></td>
                                        <td><%= subject.classAssessmentScore !== '-' ? parseFloat(subject.classAssessmentScore).toFixed(2) : '-' %></td>
                                        <td><%= subject.examsAssessmentScore !== '-' ? parseFloat(subject.examsAssessmentScore).toFixed(2) : '-' %></td>
                                        <td><%= subject.otherAssessmentScore !== '-' ? parseFloat(subject.otherAssessmentScore).toFixed(2) : '-' %></td>
                                        <td><%= subject.totalScore !== '-' ? parseFloat(subject.totalScore).toFixed(2) : '-' %></td>
                                        <td><%= subject.totalPercentage !== '-' ? parseFloat(subject.totalPercentage).toFixed(2) : '-' %> %</td>
                                        <td><%= subject.grade %></td>
                                        <td><%= subject.position !== '-' ? subject.position : '-' %></td>
                                        <td><%= subject.remarks || '-' %></td>
                                    </tr>
                                <% }) %>
                            </tbody>
                        </table>
                    </div>
                    
                    <br>
                    
                    <div class="attendance-info">
                        <table class="promotion-table">
                            <tr>
                                <td>Position in Class:</td>
                                <td><%= student.positionInClass %></td>
                                <td>Overall Percentage:</td>
                                <td><%= student.overallPercentage %> %</td>
                                <td>Attendance:</td>
                                <td><%= student.attendance.presentDays %>/<%= student.attendance.totalDays %></td>
                                </tr>
                            <% if (activatePromotion) { %>
                                <tr>
                                    <td>
                                        <select name="promotionStatus-<%= student.student_id %>" id="promotionStatus-<%= student.student_id %>" onchange="updateClass('<%= student.student_id %>')">
                                            <option value="Promoted" <%= student.promotionStatus === 'Promoted' ? 'selected' : '' %>>Promoted To:</option>
                                            <option value="Repeated" <%= student.promotionStatus === 'Repeated' ? 'selected' : '' %>>Repeated In:</option>
                                        </select>
                                    </td>
                                    <td id="promotionClass-<%= student.student_id %>"><%= student.promotionClass %></td>
                                </tr>
                            <% } %>
                        </table>
                    </div>
                    
                    <br>
                    
                    <div class="remarks">
                        <div class="remarks-container">
                            <div class="dropdown">
                                <button class="dropdown-button" id="dropdownButton-<%= index %>" onclick="toggleDropdown('<%= index %>')">
                                    Select Remarks
                                </button>
                                <div class="dropdown-content" id="dropdownContent-<%= index %>">
                                    <% teacherRemarks.forEach(function(remark) { %>
                                        <div onclick="selectRemark('<%= index %>', '<%= remark.remark %>')"><%= remark.remark %></div>
                                    <% }); %>
                                </div>
                            </div>
                            <h3>Teacher's Remarks</h3>
                        </div>

                           <div class="remarks">
                        <div class="remarks-container">
                            <select id="teacherRemarks-<%= index %>" name="teacherRemarks-<%= index %>">
                                <% teacherRemarks.forEach(function(remark) { %>
                                    <option value="<%= remark.remark %>" <%= remark.remark === student.teacherRemarks ? 'selected' : '' %>><%= remark.remark %></option>
                                <% }); %>
                            </select>
                            <h3>Teacher's Remarks</h3>
                        </div>
                        
                        <div class="signature-info">
                            <h3>Signature</h3>
                            <% if (signatureImageUrl) { %>
                                <img src="<%= signatureImageUrl %>" alt="Signature Image" style="max-width: 100px; display: block; margin-bottom: 10px;">
                            <% } else { %>
                                <p>No signature available.</p>
                            <% } %>
                        </div>
                    </div>
                </div>
            </div>
        <% }); %>
    <% } %>

    <script>
        function updateClass(studentId) {
            const statusSelect = document.getElementById('promotionStatus-' + studentId);
            const selectedStatus = statusSelect.value;
            const classCell = document.getElementById('promotionClass-' + studentId);

            const promotedClass = '<%= promotedClass %>';
            const repeatedClass = '<%= repeatedClass %>';

            if (selectedStatus === 'Promoted') {
                classCell.innerHTML = promotedClass;
            } else if (selectedStatus === 'Repeated') {
                classCell.innerHTML = repeatedClass;
            }
        }

        function adjustSelectWidth(selectElement) {
            selectElement.style.width = ""; // Reset the width to auto first
            if (selectElement.scrollWidth > 300) {
                selectElement.style.width = "300px"; // Set max width to 300px
                selectElement.style.height = ""; // Reset the height
                let lines = Math.ceil(selectElement.scrollWidth / 300);
                selectElement.style.height = lines * 24 + "px"; // Set height dynamically based on line count
            } else {
                selectElement.style.width = selectElement.scrollWidth + "px"; // Adjust to the size of the text
            }
        }

        // Adjust the initial width of each select
        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.remarks-container select').forEach(select => {
                adjustSelectWidth(select);
            });
        });

        function toggleDropdown(index) {
            const dropdownContent = document.getElementById(`dropdownContent-${index}`);
            dropdownContent.style.display = dropdownContent.style.display === 'block' ? 'none' : 'block';
        }

        function selectRemark(index, remark) {
            const dropdownButton = document.getElementById(`dropdownButton-${index}`);
            dropdownButton.textContent = remark;
            toggleDropdown(index); // Close the dropdown
        }

        // Close dropdown if clicked outside
        window.addEventListener('click', function(event) {
            if (!event.target.matches('.dropdown-button')) {
                document.querySelectorAll('.dropdown-content').forEach(content => {
                    content.style.display = 'none';
                });
            }
        });

    </script>
</body>
</html>
