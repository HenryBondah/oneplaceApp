<style>
    .date-header {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    .edit-save-link,
    .cancel-link {
        cursor: pointer;
        color: blue;
        text-decoration: underline;
        margin-top: 5px;
    }
    .cancel-link {
        color: red;
    }
    .last-edited {
        font-size: 0.8em;
        color: gray;
    }
    .center-link {
        display: flex;
        justify-content: center;
        margin-bottom: 20px;
    }
    .attendance-sheet th,
    .attendance-sheet td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: center; 
        vertical-align: middle; /
    }
    .attendance-sheet input[type="checkbox"] {
        transform: scale(1.3);
    }
    </style>
</head>
<body>
    <div class="link-to-next-back">
        <a href="/common/classDashboard?classId=<%= classId %>" class="back-link">Back to Class Dashboard</a>
    </div>

    <hr>
    <h1 style="text-align: center;">Attendance Records for <%= className %></h1>
    <div class="attendance-sheet-container">
        <table class="attendance-sheet">
            <thead>
                <tr>
                    <th class="student-name">Student Name</th>
                    <th>
                        <div class="date-header">
                            <%= new Date(today).toLocaleDateString() %>
                            <div class="edit-save-link" data-date="<%= today %>" onclick="toggleEditSaveMode('<%= today %>')">Edit</div>
                            <div class="cancel-link" data-date="<%= today %>" style="display: none;" onclick="cancelEditMode('<%= today %>')">Cancel</div>
                            <div class="last-edited" id="last-edited-<%= today %>">
                                <% if (typeof lastEditedMap !== 'undefined' && lastEditedMap[today]) { %>
                                    Last edited: <%= new Date(lastEditedMap[today]).toLocaleString() %>
                                <% } %>
                            </div>
                        </div>
                    </th>
                    <% displayDates.sort((a, b) => new Date(b) - new Date(a)).forEach(date => { if (date !== today) { %>
                        <th>
                            <div class="date-header">
                                <%= new Date(date).toLocaleDateString() %>
                                <div class="edit-save-link" data-date="<%= date %>" onclick="toggleEditSaveMode('<%= date %>')">Edit</div>
                                <div class="cancel-link" data-date="<%= date %>" style="display: none;" onclick="cancelEditMode('<%= date %>')">Cancel</div>
                                <div class="last-edited" id="last-edited-<%= date %>">
                                    <% if (typeof lastEditedMap !== 'undefined' && lastEditedMap[date]) { %>
                                        Last edited: <%= new Date(lastEditedMap[date]).toLocaleString() %>
                                    <% } %>
                                </div>
                            </div>
                        </th>
                    <% }}); %>
                </tr>
            </thead>
            <tbody>
                <% students.forEach(student => { %>
                    <tr>
                        <td class="student-name" data-student-id="<%= student.student_id %>"><%= student.first_name %> <%= student.last_name %></td>
                        <td>
                            <input type="checkbox" data-date="<%= today %>" data-student-id="<%= student.student_id %>"
                                <%= attendanceMap[student.student_id] && attendanceMap[student.student_id][today] === 'Present' ? 'checked' : '' %> 
                                <%= attendanceMap[student.student_id] && attendanceMap[student.student_id][today] ? 'disabled' : '' %> >
                        </td>
                        <% displayDates.sort((a, b) => new Date(b) - new Date(a)).forEach(date => { if (date !== today) { %>
                            <td>
                                <input type="checkbox" data-date="<%= date %>" data-student-id="<%= student.student_id %>" 
                                    <%= attendanceMap[student.student_id] && attendanceMap[student.student_id][date] === 'Present' ? 'checked' : '' %> 
                                    <%= attendanceMap[student.student_id] && attendanceMap[student.student_id][date] ? 'disabled' : '' %> >
                            </td>
                        <% }}); %>
                    </tr>
                <% }); %>
            </tbody>
        </table>
    </div>
    <script>
        let originalStates = {};

        document.addEventListener('DOMContentLoaded', () => {
            const classId = '<%= classId %>';
            fetch(`/common/getAttendanceForClass?classId=${classId}&termId=<%= termId %>`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const attendanceMap = {};
                        const lastEditedMap = {};

                        data.attendance.forEach(record => {
                            if (!attendanceMap[record.student_id]) {
                                attendanceMap[record.student_id] = {};
                            }
                            attendanceMap[record.student_id][record.date] = record.status;

                            // Store last edited date and time
                            if (record.updated_at) {
                                lastEditedMap[record.date] = record.updated_at;
                            }
                        });

                        const students = document.querySelectorAll('.attendance-sheet tbody tr');
                        students.forEach(student => {
                            const studentId = student.querySelector('td').dataset.studentId;
                            const dates = student.querySelectorAll('td input[type="checkbox"]');
                            dates.forEach(dateCheckbox => {
                                const date = dateCheckbox.dataset.date;
                                if (attendanceMap[studentId] && attendanceMap[studentId][date]) {
                                    dateCheckbox.checked = attendanceMap[studentId][date] === 'Present';
                                    dateCheckbox.disabled = true;
                                }
                            });
                        });

                        // Set last edited date and time for each date column
                        Object.keys(lastEditedMap).forEach(date => {
                            const lastEditedElement = document.getElementById(`last-edited-${date}`);
                            if (lastEditedElement) {
                                lastEditedElement.textContent = `Last edited: ${new Date(lastEditedMap[date]).toLocaleString()}`;
                            }
                        });
                    } else {
                        console.error('Failed to fetch attendance:', data.error);
                    }
                })
                .catch(error => {
                    console.error('Error fetching attendance:', error);
                });
        });

        function toggleEditSaveMode(date) {
            const checkboxes = document.querySelectorAll(`input[data-date='${date}']`);
            const link = document.querySelector(`.edit-save-link[data-date='${date}']`);
            const cancelLink = document.querySelector(`.cancel-link[data-date='${date}']`);

            if (link.textContent === 'Save') {
                saveAttendanceForDate(date, checkboxes, link);
            } else if (link.textContent === 'Edit') {
                saveOriginalStates(date, checkboxes);
                checkboxes.forEach(checkbox => {
                    checkbox.disabled = false;
                });
                link.textContent = 'Save';
                cancelLink.style.display = 'block';
            }
        }

        function saveAttendanceForDate(date, checkboxes, link) {
            const attendanceData = {};
            const classId = '<%= classId %>';
            const termId = '<%= termId %>';

            checkboxes.forEach(checkbox => {
                attendanceData[checkbox.dataset.studentId] = checkbox.checked ? 'Present' : 'Absent';
            });

            fetch('/common/saveSingleAttendance', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ attendance: attendanceData, classId, termId, date })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(`Attendance for ${date} saved successfully!`);
                    link.textContent = 'Edit';
                    checkboxes.forEach(checkbox => {
                        checkbox.disabled = true;
                    });
                    const cancelLink = document.querySelector(`.cancel-link[data-date='${date}']`);
                    cancelLink.style.display = 'none';

                    // Update last edited date and time
                    const lastEditedElement = document.getElementById(`last-edited-${date}`);
                    if (lastEditedElement) {
                        lastEditedElement.textContent = `Last edited: ${new Date().toLocaleString()}`;
                    }
                } else {
                    console.error('Failed to save attendance:', data.error);
                    alert('Failed to save attendance. Please try again.');
                }
            })
            .catch(error => {
                console.error('Error saving attendance:', error);
                alert('Failed to save attendance. Please try again.');
            });
        }

        function saveOriginalStates(date, checkboxes) {
            originalStates[date] = {};
            checkboxes.forEach(checkbox => {
                originalStates[date][checkbox.dataset.studentId] = checkbox.checked;
            });
        }

        function restoreOriginalStates(date, checkboxes) {
            checkboxes.forEach(checkbox => {
                checkbox.checked = originalStates[date][checkbox.dataset.studentId];
                checkbox.disabled = true;
            });
        }

        function cancelEditMode(date) {
            const checkboxes = document.querySelectorAll(`input[data-date='${date}']`);
            restoreOriginalStates(date, checkboxes);
            const link = document.querySelector(`.edit-save-link[data-date='${date}']`);
            link.textContent = 'Edit';
            const cancelLink = document.querySelector(`.cancel-link[data-date='${date}']`);
            cancelLink.style.display = 'none';
        }
    </script>
